import java.util.Scanner;

public class ThreadOne {
	
	static MyThread mt1 = new MyThread("One");
	static MyThread mt2 = new MyThread("Two");
	static MyThread mt3 = new MyThread("Three");
	static MyThread mt4 = new MyThread("Four");
	static MyThread mt5 = new MyThread("Five");

	//initialize controlThread
	static int controlThread = 0;

	public static void main(String[] args) {
		
		
		Scanner userInput = new Scanner(System.in);
		byte control = 0;
		
		do 
		{	
			//get userInput
//			control = userInput.nextInt();
			control = userInput.nextByte();
			
			if (control == 1 || control == 2 || control == 3 || control == 4 || control == 5 ) {
				selectThread(control);
			}
			else if ((control == 'T' || control == 'L' || control == 'N' || control == 'S') & (controlThread != 0)){
				controlOneThread(control);
			}
//				else if(controlThread == 1) {
//						//control for thread 1
//						switch(control) {
//						case(1):
//								if(!mt1.suspended) {
//									mt1.mysuspend();
//								}else {
//									mt1.myresume();
//								}
//								
//							break;
//						case('h'):
//						case('H'):
//							System.out.println("Setting priority to high");
//							mt1.thrd.setPriority(8);
//							break;
//						case('l'): 
//						case('L'): 
//							System.out.println("Setting priority to low");
//							mt1.thrd.setPriority(1);
//							break;
//						case('n'): 
//						case('N'): 
//							System.out.println("Setting priority to normal");
//							mt1.thrd.setPriority(5);
//							break;
//						case('s'):
//						case('S'): 
//							mt1.mystop();
//							System.out.println("The available threads are:");
//							if(mt1.thrd.isAlive()) {
//								System.out.println("Thread " + mt1.thrd.getName() + ": " + mt1.thrd.getState() + " - Press Key " + mt1.thrd.getName() + " to control");
//							}
//							if(mt2.thrd.isAlive()) {
//								System.out.println("Thread " + mt2.thrd.getName() + ": " + mt2.thrd.getState() + " - Press Key " + mt2.thrd.getName() + " to control");
//							}
//							if(mt3.thrd.isAlive()) {
//								System.out.println("Thread " + mt3.thrd.getName() + ": " + mt3.thrd.getState() + " - Press Key " + mt3.thrd.getName() + " to control");
//							}
//							if(mt4.thrd.isAlive()) {
//								System.out.println("Thread " + mt4.thrd.getName() + ": " + mt4.thrd.getState() + " - Press Key " + mt4.thrd.getName() + " to control");
//							}
//							if(mt5.thrd.isAlive()) {
//								System.out.println("Thread " + mt5.thrd.getName() + ": " + mt5.thrd.getState() + " - Press Key " + mt5.thrd.getName() + " to control");
//							}
//							break;
//						case 2:
//							if (mt2.thrd.isAlive() & mt2.suspended) {
//								resumeThread(mt2);
//							}
//							//if thread is alive and running suspend thread
//							else if (mt2.thrd.isAlive() & !mt2.suspended) {
//								pauseThread(mt2);
//							}
//							break;
//						case 3: 
//							if (mt3.thrd.isAlive() & mt3.suspended) {
//								resumeThread(mt3);
//							}
//							//if thread is alive and running suspend thread
//							else if (mt3.thrd.isAlive() & !mt3.suspended) {
//								pauseThread(mt3);
//							}
//							break;
//						case 4: 
//							if (mt4.thrd.isAlive() & mt4.suspended) {
//								resumeThread(mt4);
//							}
//							//if thread is alive and running suspend thread
//							else if (mt4.thrd.isAlive() & !mt4.suspended) {
//								pauseThread(mt4);
//							}
//							break;
//						case 5: 
//							if (mt5.thrd.isAlive() & mt5.suspended) {
//								resumeThread(mt5);
//							}
//							//if thread is alive and running suspend thread
//							else if (mt5.thrd.isAlive() & !mt5.suspended) {
//								pauseThread(mt5);
//							}
//							break;
//						default:	
//						}
//					}else if(controlThread ==2 ) {
//						switch(control) {
//						case (1):
//							if (mt1.thrd.isAlive() & mt1.suspended) {
//								resumeThread(mt1);
//							}
//							//if thread is alive and running suspend thread
//							else if (mt1.thrd.isAlive() & !mt1.suspended) {
//								pauseThread(mt1);
//							}
//							break;
//						case (2):
//							if(!mt2.suspended) {
//								mt2.mysuspend();
//							}else {
//								mt2.myresume();
//							}
//						break;
//					case('h'):
//						System.out.println("Setting priority to high");
//						mt2.thrd.setPriority(8);
//						break;
//					case('l'): 
//						System.out.println("Setting priority to low");
//						mt2.thrd.setPriority(1);
//						break;
//					case('n'): 
//						System.out.println("Setting priority to normal");
//						mt2.thrd.setPriority(5);
//						break;
//					case('s'):
//						mt2.mystop();
//						System.out.println("The available threads are:");
//						if(mt2.thrd.isAlive()) {
//							System.out.println("Thread " + mt1.thrd.getName() + ": " + mt1.thrd.getState() + " - Press Key " + mt1.thrd.getName() + " to control");
//						}
//						if(mt2.thrd.isAlive()) {
//							System.out.println("Thread " + mt2.thrd.getName() + ": " + mt2.thrd.getState() + " - Press Key " + mt2.thrd.getName() + " to control");
//						}
//						if(mt3.thrd.isAlive()) {
//							System.out.println("Thread " + mt3.thrd.getName() + ": " + mt3.thrd.getState() + " - Press Key " + mt3.thrd.getName() + " to control");
//						}
//						if(mt4.thrd.isAlive()) {
//							System.out.println("Thread " + mt4.thrd.getName() + ": " + mt4.thrd.getState() + " - Press Key " + mt4.thrd.getName() + " to control");
//						}
//						if(mt5.thrd.isAlive()) {
//							System.out.println("Thread " + mt5.thrd.getName() + ": " + mt5.thrd.getState() + " - Press Key " + mt5.thrd.getName() + " to control");
//						}
//						break;
//					case(3):
//						//if thread is alive and suspended resume thread
//						if (mt3.thrd.isAlive() & mt3.suspended) {
//							resumeThread(mt3);
//						}
//						//if thread is alive and running suspend thread
//						else if (mt3.thrd.isAlive() & !mt3.suspended) {
//							pauseThread(mt3);
//						}
//						break;
//					case(4): 
//						//if thread is alive and suspended resume thread
//						if (mt4.thrd.isAlive() & mt4.suspended) {
//							resumeThread(mt4);
//						}
//						//if thread is alive and running suspend thread
//						else if (mt4.thrd.isAlive() & !mt4.suspended) {
//							pauseThread(mt4);
//						}
//						break;
//					case(5):
//						//if thread is alive and suspended resume thread
//						if (mt5.thrd.isAlive() & mt5.suspended) {
//							resumeThread(mt5);
//						}
//						//if thread is alive and running suspend thread
//						else if (mt5.thrd.isAlive() & !mt5.suspended) {
//							pauseThread(mt5);
//						}
//						break;
//					default:		
//						}
//					}else if(controlThread == 3) {
//						switch(control) {
//						case(1): 
//							//if thread is alive and suspended resume thread
//							if (mt1.thrd.isAlive() & mt1.suspended) {
//								resumeThread(mt1);
//							}
//							//if thread is alive and running suspend thread
//							else if (mt1.thrd.isAlive() & !mt1.suspended) {
//								pauseThread(mt1);
//							}
//							break;
//						case(2):
//							//if thread is alive and suspended resume thread
//							if (mt2.thrd.isAlive() & mt2.suspended) {
//								resumeThread(mt2);
//							}
//							//if thread is alive and running suspend thread
//							else if (mt2.thrd.isAlive() & !mt2.suspended) {
//								pauseThread(mt2);
//							}
//							break;
//						case(3):
//							if(!mt3.suspended) {
//								mt3.mysuspend();
//							}else {
//								mt3.myresume();
//							}
//						break;
//					case('h'):
//						System.out.println("Setting priority to high");
//						mt3.thrd.setPriority(8);
//						break;
//					case('l'): 
//						System.out.println("Setting priority to low");
//						mt3.thrd.setPriority(1);
//						break;
//					case('n'): 
//						System.out.println("Setting priority to normal");
//						mt3.thrd.setPriority(5);
//						break;
//					case('s'):
//						mt3.mystop();
//						System.out.println("The available threads are:");
//						if(mt1.thrd.isAlive()) {
//							System.out.println("Thread " + mt1.thrd.getName() + ": " + mt1.thrd.getState() + " - Press Key " + mt1.thrd.getName() + " to control");
//						}
//						if(mt2.thrd.isAlive()) {
//							System.out.println("Thread " + mt2.thrd.getName() + ": " + mt2.thrd.getState() + " - Press Key " + mt2.thrd.getName() + " to control");
//						}
//						if(mt3.thrd.isAlive()) {
//							System.out.println("Thread " + mt3.thrd.getName() + ": " + mt3.thrd.getState() + " - Press Key " + mt3.thrd.getName() + " to control");
//						}
//						if(mt4.thrd.isAlive()) {
//							System.out.println("Thread " + mt4.thrd.getName() + ": " + mt4.thrd.getState() + " - Press Key " + mt4.thrd.getName() + " to control");
//						}
//						if(mt5.thrd.isAlive()) {
//							System.out.println("Thread " + mt5.thrd.getName() + ": " + mt5.thrd.getState() + " - Press Key " + mt5.thrd.getName() + " to control");
//						}
//						break;
//					case(4):
//						//if thread is alive and suspended resume thread
//						if (mt4.thrd.isAlive() & mt4.suspended) {
//							resumeThread(mt4);
//						}
//						//if thread is alive and running suspend thread
//						else if (mt4.thrd.isAlive() & !mt4.suspended) {
//							pauseThread(mt4);
//						}
//						break;
//					case(5):
//						//if thread is alive and suspended resume thread
//						if (mt5.thrd.isAlive() & mt5.suspended) {
//							resumeThread(mt1);
//						}
//						//if thread is alive and running suspend thread
//						else if (mt5.thrd.isAlive() & !mt5.suspended) {
//							pauseThread(mt5);
//						}
//						break;
//						default:
//						}
//					}else if(controlThread==4) {
//						switch(control) {
//						case(1):
//							//if thread is alive and suspended resume thread
//							if (mt1.thrd.isAlive() & mt1.suspended) {
//								resumeThread(mt1);
//							}
//							//if thread is alive and running suspend thread
//							else if (mt1.thrd.isAlive() & !mt1.suspended) {
//								pauseThread(mt1);
//							}
//							break;
//						case(2):
//							//if thread is alive and suspended resume thread
//							if (mt2.thrd.isAlive() & mt2.suspended) {
//								resumeThread(mt2);
//							}
//							//if thread is alive and running suspend thread
//							else if (mt2.thrd.isAlive() & !mt2.suspended) {
//								pauseThread(mt2);
//							}
//							break;
//						case(3):
//							//if thread is alive and suspended resume thread
//							if (mt3.thrd.isAlive() & mt3.suspended) {
//								resumeThread(mt3);
//							}
//							//if thread is alive and running suspend thread
//							else if (mt3.thrd.isAlive() & !mt3.suspended) {
//								pauseThread(mt3);
//							}
//							break;
//						case(4):
//							if(!mt4.suspended) {
//								mt4.mysuspend();
//							}else {
//								mt4.myresume();
//							}
//						break;
//					case('h'):
//						System.out.println("Setting priority to high");
//						mt4.thrd.setPriority(8);
//						break;
//					case('l'): 
//						System.out.println("Setting priority to low");
//						mt4.thrd.setPriority(1);
//						break;
//					case('n'): 
//						System.out.println("Setting priority to normal");
//						mt4.thrd.setPriority(5);
//						break;
//					case('s'):
//						mt4.mystop();
//						System.out.println("The available threads are:");
//						if(mt1.thrd.isAlive()) {
//							System.out.println("Thread " + mt1.thrd.getName() + ": " + mt1.thrd.getState() + " - Press Key " + mt1.thrd.getName() + " to control");
//						}
//						if(mt2.thrd.isAlive()) {
//							System.out.println("Thread " + mt2.thrd.getName() + ": " + mt2.thrd.getState() + " - Press Key " + mt2.thrd.getName() + " to control");
//						}
//						if(mt3.thrd.isAlive()) {
//							System.out.println("Thread " + mt3.thrd.getName() + ": " + mt3.thrd.getState() + " - Press Key " + mt3.thrd.getName() + " to control");
//						}
//						if(mt4.thrd.isAlive()) {
//							System.out.println("Thread " + mt4.thrd.getName() + ": " + mt4.thrd.getState() + " - Press Key " + mt4.thrd.getName() + " to control");
//						}
//						if(mt5.thrd.isAlive()) {
//							System.out.println("Thread " + mt5.thrd.getName() + ": " + mt5.thrd.getState() + " - Press Key " + mt5.thrd.getName() + " to control");
//						}
//						break;
//					case(5):
//						//if thread is alive and suspended resume thread
//						if (mt5.thrd.isAlive() & mt5.suspended) {
//							resumeThread(mt5);
//						}
//						//if thread is alive and running suspend thread
//						else if (mt5.thrd.isAlive() & !mt5.suspended) {
//							pauseThread(mt5);
//						}
//						break;
//						default:
//						}
//					}else if(controlThread ==5) {
//						switch(control) {
//						case(1):
//							//if thread is alive and suspended resume thread
//							if (mt1.thrd.isAlive() & mt1.suspended) {
//								resumeThread(mt1);
//							}
//							//if thread is alive and running suspend thread
//							else if (mt1.thrd.isAlive() & !mt1.suspended) {
//								pauseThread(mt1);
//							}
//							break;
//						case(2):
//							//if thread is alive and suspended resume thread
//							if (mt2.thrd.isAlive() & mt2.suspended) {
//								resumeThread(mt2);
//							}
//							//if thread is alive and running suspend thread
//							else if (mt2.thrd.isAlive() & !mt2.suspended) {
//								pauseThread(mt2);
//							}
//							break;
//						case(3):
//							//if thread is alive and suspended resume thread
//							if (mt3.thrd.isAlive() & mt3.suspended) {
//								resumeThread(mt3);
//							}
//							//if thread is alive and running suspend thread
//							else if (mt3.thrd.isAlive() & !mt3.suspended) {
//								pauseThread(mt3);
//							}
//							break;
//						case(4):
//							//if thread is alive and suspended resume thread
//							if (mt2.thrd.isAlive() & mt2.suspended) {
//								resumeThread(mt2);
//							}
//							//if thread is alive and running suspend thread
//							else if (mt4.thrd.isAlive() & !mt4.suspended) {
//								pauseThread(mt4);
//							}
//							break;
//						case(5):
//							if(!mt5.suspended) {
//								mt5.mysuspend();
//							}else {
//								mt5.myresume();
//							}
//						break;
//					case('h'):
//						System.out.println("Setting priority to high");
//						mt5.thrd.setPriority(8);
//						break;
//					case('l'): 
//						System.out.println("Setting priority to low");
//						mt5.thrd.setPriority(1);
//						break;
//					case('n'): 
//						System.out.println("Setting priority to normal");
//						mt5.thrd.setPriority(5);
//						break;
//					case('s'):
//						mt5.mystop();
//						System.out.println("The available threads are:");
//						if(mt1.thrd.isAlive()) {
//							System.out.println("Thread " + mt1.thrd.getName() + ": " + mt1.thrd.getState() + " - Press Key " + mt1.thrd.getName() + " to control");
//						}
//						if(mt2.thrd.isAlive()) {
//							System.out.println("Thread " + mt2.thrd.getName() + ": " + mt2.thrd.getState() + " - Press Key " + mt2.thrd.getName() + " to control");
//						}
//						if(mt3.thrd.isAlive()) {
//							System.out.println("Thread " + mt3.thrd.getName() + ": " + mt3.thrd.getState() + " - Press Key " + mt3.thrd.getName() + " to control");
//						}
//						if(mt4.thrd.isAlive()) {
//							System.out.println("Thread " + mt4.thrd.getName() + ": " + mt4.thrd.getState() + " - Press Key " + mt4.thrd.getName() + " to control");
//						}
//						if(mt5.thrd.isAlive()) {
//							System.out.println("Thread " + mt5.thrd.getName() + ": " + mt5.thrd.getState() + " - Press Key " + mt5.thrd.getName() + " to control");
//						}
//						break;
//						
//						}
//					}
			
		} while(mt1.thrd.isAlive()  || mt2.thrd.isAlive() || mt3.thrd.isAlive() || mt4.thrd.isAlive() || mt5.thrd.isAlive());
		
		System.out.println("This app is not exiting, all threads have been stopped.");
		
		
		//release resources
		userInput.close();
	}
	
	static void controlOneThread(int control) {
		
	}
	
	static void selectThread(int control) {
		
		if (controlThread != control) {
			//set control thread
			controlThread =  control;
			System.out.println("Controlling thread " + control);
		}
		else if(control == controlThread) 
			//controlThread is set already toggle the thread
			switch (controlThread) {
			case 1:
				//if thread is alive and suspended resume thread
				if (mt1.thrd.isAlive() & mt1.suspended) {
					resumeThread(mt1);
				}
				//if thread is alive and running suspend thread
				else if (mt1.thrd.isAlive() & !mt1.suspended) {
					pauseThread(mt1);
				}
				break;
				
			case 2:
				//if thread is alive and suspended resume thread
				if (mt2.thrd.isAlive() & mt2.suspended) {
					resumeThread(mt2);
				}
				//if thread is alive and running suspend thread
				else if (mt2.thrd.isAlive() & !mt2.suspended) {
					pauseThread(mt2);
				}
				break;
			case 3:
				//if thread is alive and suspended resume thread
				if (mt3.thrd.isAlive() & mt3.suspended) {
					resumeThread(mt3);
				}
				//if thread is alive and running suspend thread
				else if (mt3.thrd.isAlive() & !mt3.suspended) {
					pauseThread(mt3);
				}
				break;
				
			case 4:
				//if thread is alive and suspended resume thread
				if (mt4.thrd.isAlive() & mt4.suspended) {
					resumeThread(mt4);
				}
				//if thread is alive and running suspend thread
				else if (mt4.thrd.isAlive() & !mt4.suspended) {
					pauseThread(mt4);
				}
				break;
				
			case 5:
				//if thread is alive and suspended resume thread
				if (mt5.thrd.isAlive() & mt5.suspended) {
					resumeThread(mt5);
				}
				//if thread is alive and running suspend thread
				else if (mt5.thrd.isAlive() & !mt5.suspended) {
					pauseThread(mt5);
				}
				break;
				
			default:
				break;
		
			}
		
	}
	
	static void stopThread(MyThread myThread) {
		
		//Stop thread
		myThread.mystop();
		
		//List available threads
		System.out.println("The available threads are:");
		if(mt1.thrd.isAlive()) {
			System.out.println("Thread " + mt1.thrd.getName() + ": " + mt1.thrd.getState() + " - Press Key 1 to control");
		}
		if(mt2.thrd.isAlive()) {
			System.out.println("Thread " + mt2.thrd.getName() + ": " + mt2.thrd.getState() + " - Press Key 2 to control");
		}
		if(mt3.thrd.isAlive()) {
			System.out.println("Thread " + mt3.thrd.getName() + ": " + mt3.thrd.getState() + " - Press Key 3 to control");
		}
		if(mt4.thrd.isAlive()) {
			System.out.println("Thread " + mt4.thrd.getName() + ": " + mt4.thrd.getState() + " - Press Key 4 to control");
		}
		if(mt5.thrd.isAlive()) {
			System.out.println("Thread " + mt5.thrd.getName() + ": " + mt5.thrd.getState() + " - Press Key 5 to control");
		}

	}
	
	static void pauseThread(MyThread myThread) {

		//Suspend thread
		myThread.mysuspend();
	}
	
	static void resumeThread(MyThread myThread) {
 
		//Resume thread
		myThread.myresume();
	}
}//end threadone class 